@using AntDesign
@using Models
@using System.Text.Json
@using Service;
@inject INotificationService _notice

@inherits FeedbackComponent<InsertBranch>

<Form Model="@_model" Layout="vertical" ValidateMode=@FormValidateMode.Complex>
    <FormItem Label="Country" Required>
        <Select TItem="Country"
                TItemValue="string"
                DataSource="_CountryList"
                @bind-Value="@context.Country"
                Label="Province"
                LabelName="@nameof(Country.name)"
                ValueName="@nameof(Country.name)"
                Placeholder="Select a Country"
                DefaultActiveFirstOption="false"
                EnableSearch
                OnBlur="OnBlur"
                OnFocus="OnFocus"
                OnSelectedItemChanged="OnSelectedItemCountryChangedHandler"
                OnSearch="OnSearch">
        </Select>
    </FormItem>
    <FormItem Label="Province" Rules=@(new FormValidationRule[]{ new FormValidationRule{ Required = true } })>
        <Select TItem="Province"
                TItemValue="string"
                DataSource="_ProvinceList"
                @bind-Value="@context.Province"
                Label="Province"
                LabelName="@nameof(Province.name)"
                ValueName="@nameof(Province.name)"
                Placeholder="Select a Country"
                DefaultActiveFirstOption="false"
                EnableSearch
                OnBlur="OnBlur"
                OnFocus="OnFocus"
                OnSelectedItemChanged="OnSelectedItemProvinceChangedHandler"
                OnSearch="OnSearch">
        </Select>
    </FormItem>
    <FormItem Label="Branch Name" Rules=@(new FormValidationRule[]{ new FormValidationRule{ Required = true } })>
        <Input @bind-Value="@context.Name" />
    </FormItem>
</Form> 




@code {
@using API.httpClient;

    InsertBranch _model;

    List<Country> _CountryList;
    List<Province> _ProvinceList;

    string _selectedCountryValue;
    string _selectedProvinceValue;

    protected override async void OnInitialized()
    {
        _model = base.Options ?? new InsertBranch();
        await load();
    }

    public async Task load()
    {
        _CountryList = await CountryService.GetCountries();
    }

    private async void OnSelectedItemCountryChangedHandler(Country value)
    {
        _selectedCountryValue = value.name;
        _ProvinceList = await ProvinceClient.GetProvincesAsync(value.name);
        //Console.WriteLine($"selected: ${value?.name}");
    }

    private void OnSelectedItemProvinceChangedHandler(Province value)
    {
        _selectedProvinceValue = value.name;
        Console.WriteLine($"selected: ${value?.name}");
    }

    public override async Task OnFeedbackOkAsync(ModalClosingEventArgs args)
    {

        Console.WriteLine("ADD API", _model); // CALL API to ADD

        var response = await BranchService.RegisterBranch(_model);

        if (response)
        {

        }
        else
        {
            Console.WriteLine("Add Failed");
        }
    }

    private void OnBlur()
    {
        Console.WriteLine("blur");
    }

    private void OnFocus()
    {
        Console.WriteLine("focus");
    }

    private void OnSearch(string value)
    {
        Console.WriteLine($"search: {value}");
    }

} 